{"version":3,"sources":["FilePicker.tsx","FileList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FilePicker","root_folder_id","add_files","useState","file","set_file","loading","set_loading","on_file","useCallback","event","target","files","length","item","split_file","a","chunkSize","fileSize","size","chunks","Math","ceil","slices","chunk","console","log","offset","slice","type","push","reduce","total","token","gapi","auth","getToken","access_token","Promise","all","map","index","fetch","method","headers","body","then","response","json","id","JSON","stringify","name","output","startsWith","chunk_index","match","parseInt","findIndex","replace","ids","error","onChange","onClick","disabled","FileRow","on_file_download","blob","result","file_to_download","Blob","download","FileList","set_files","useEffect","new_files","client","drive","list","fields","q","ROOT_FOLDER_MIME","forEach","DISCOVERY_DOCS","ROOT_FOLDER_NAME","App","loaded","set_loaded","signed","set_signed","set_root_folder_id","load","init","apiKey","process","clientId","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","listen","get","pageSize","initialize_root","create","resource","mimeType","signout","signOut","old_files","className","signIn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5640dc1b.chunk.js","sourcesContent":["import {useCallback, ChangeEvent, useState} from 'react';\nimport { FileType } from './App';\n\nexport function FilePicker({root_folder_id, add_files}: {root_folder_id: string; add_files: (files: FileType[]) => void})\n{\n    const [file, set_file] = useState<File | null>(null);\n    const [loading, set_loading] = useState(false);\n    const on_file = useCallback((event: ChangeEvent<HTMLInputElement>) => \n    {\n        if(event.target.files && event.target.files.length)\n            set_file(event.target.files.item(0));\n    }, []);\n\n    const split_file = useCallback(async () => \n    {\n        if(!file)\n            return;\n\n        set_loading(true);\n\n        const chunkSize = 1024 * 1024;\n        const fileSize = file.size;\n        const chunks = Math.ceil(file.size / chunkSize) - 1;\n        const slices: Blob[] = [];\n        let chunk = 0;\n\n        console.log('file size..', fileSize);\n        console.log('chunks...', chunks);\n\n        while (chunk <= chunks) \n        {\n            const offset = chunk * chunkSize;\n            console.log(file.slice(offset, offset + chunkSize, file.type));\n            slices.push(file.slice(offset, offset + chunkSize, file.type));\n            chunk++;\n        }\n\n        console.log('total chunk size', slices.reduce((total, {size}) => total + size, 0));\n\n        const token = gapi.auth.getToken().access_token;\n\n        try\n        {\n            const response: {id: string; name: string}[] = await Promise.all(slices.map((slice, index) => fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=media', {\n                    method: 'POST',\n                    headers: {\n                        'Content-type': 'application/octet-stream',\n                        'Authorization': 'Bearer ' + token\n                    },\n                    body: slice\n                })\n                    .then(async response => response.json())\n                    .then((response: {id: string}) => fetch(`https://www.googleapis.com/drive/v3/files/${response.id}?addParents=${root_folder_id}`, {\n                        method: 'PATCH',\n                        headers: {\n                            'Content-type': 'application/json',\n                            'Authorization': 'Bearer ' + token\n                        },\n                        body: JSON.stringify({\n                            name: `[${index}]${file.name}`\n                        })\n                    }))\n                    .then(async response => response.json()))\n            );\n            \n            add_files(response.reduce((output, slice) => \n            {\n                if(!slice.name.startsWith('['))\n                    return output;\n                \n                let chunk_index: number | string | undefined = slice.name.match(/^\\[([0-9]+)\\]/)?.[1];\n                \n                if(!chunk_index)\n                    return output;\n\n                chunk_index = parseInt(chunk_index);\n\n                const index = output.findIndex(({name}) => slice.name.replace(/^\\[[0-9]+\\]/, '') === name.replace(/^\\[[0-9]+\\]/, ''));\n\n                if(index > -1)\n                    output[index].ids[chunk_index] = slice.id;\n                else\n                {\n                    const ids: string[] = [];\n                    ids[chunk_index] = slice.id;\n                    output.push({ids, name: slice.name.replace(/^\\[[0-9]+\\]/, '')});\n                }\n\n                return output;\n            }, [] as FileType[]));\n            \n            set_loading(false);\n        }\n        catch(error)\n        {\n            console.error(error);\n            \n            set_loading(false);\n        }\n    }, [file, root_folder_id, add_files]);\n\n    return <>\n        <input type='file' onChange={on_file} />\n        {file && <button onClick={split_file} disabled={loading}>Upload file</button>}\n        {loading && <span>uploading...</span>}\n    </>;\n}","import { useEffect, useCallback, useState } from 'react';\nimport download from 'js-file-download';\n\nimport {ROOT_FOLDER_MIME, FileType} from './App';\n\nfunction FileRow({file}: {file: FileType})\n{\n    const {ids, name} = file;\n\n    const [loading, set_loading] = useState(false);\n\n    const on_file_download = useCallback(async () => \n    {\n        const token = gapi.auth.getToken().access_token;\n\n        set_loading(true);\n\n        try\n        {\n            const result: Blob[] = await Promise.all(ids.map(id => fetch(`https://www.googleapis.com/drive/v3/files/${id}?alt=media`, {\n                headers: {\n                    'Authorization': 'Bearer ' + token\n                },\n            }).then(response => response.blob())));\n    \n            console.log(result);\n    \n            const file_to_download = new Blob(result, {type: result[0].type});\n    \n            console.log(file_to_download);\n    \n            download(file_to_download, name);\n\n            set_loading(false);\n        }\n        catch(error)\n        {\n            console.error(error);\n            \n            set_loading(false);\n        }\n    }, [ids, name]);\n\n    return (<div key={ids[0]}><div>{name}</div><button disabled={loading} onClick={on_file_download}>download file</button>{loading && <span>loading...</span>}</div>);\n}\n\nexport function FileList({root_folder_id, files, set_files}: {root_folder_id: string; files: FileType[]; set_files: (files: FileType[]) => void})\n{\n    useEffect(() => \n    {\n        (async () => \n        {\n            const new_files: FileType[] = [];\n            const response: {result: {files: {id: string; name: string}[]}} = await (gapi.client as any).drive.files.list({\n                fields: 'nextPageToken, files(id, name)',\n                q: `mimeType != '${ROOT_FOLDER_MIME}' and '${root_folder_id}' in parents and trashed = false`\n            });\n              \n            response.result.files.forEach(file => \n            {\n                if(!file.name.startsWith('['))\n                    return;\n\n                let chunk_index: number | string | undefined = file.name.match(/^\\[([0-9]+)\\]/)?.[1];\n\n                if(!chunk_index)\n                    return;\n\n                chunk_index = parseInt(chunk_index);\n\n                const index = new_files.findIndex(({name}) => file.name.replace(/^\\[[0-9]+\\]/, '') === name.replace(/^\\[[0-9]+\\]/, ''));\n\n                if(index > -1)\n                    new_files[index].ids[chunk_index] = file.id;\n                else\n                {\n                    const ids: string[] = [];\n                    ids[chunk_index] = file.id;\n                    new_files.push({ids, name: file.name.replace(/^\\[[0-9]+\\]/, '')});\n                }\n            });\n\n            set_files(new_files);\n        })();\n    }, []);\n\n    return <div>\n        {files.map((file) => <FileRow key={file.ids[0]} file={file} />)}\n    </div>;\n}","import { useCallback, useEffect, useState } from 'react';\nimport './App.css';\nimport { FilePicker } from './FilePicker';\nimport { FileList } from './FileList';\n\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"];\n\nconst SCOPES = 'https://www.googleapis.com/auth/drive';\n\nexport const ROOT_FOLDER_NAME = 'sync app';\nexport const ROOT_FOLDER_MIME = 'application/vnd.google-apps.folder';\n\nexport interface FileType\n{\n    ids: string[];\n    name: string;\n}\n\nfunction App() {\n\n  const [loaded, set_loaded] = useState(false);\n  const [signed, set_signed] = useState(false);\n  const [root_folder_id, set_root_folder_id] = useState('');\n  const [files, set_files] = useState<FileType[]>([]);\n\n  useEffect(() => \n  {\n    gapi.load('client:auth2', () => \n    {\n      console.log('gapi loaded');\n\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES\n      }).then(() => \n      {    \n        console.log('gapi inited');\n        set_loaded(true);\n        (gapi as any).auth2.getAuthInstance().isSignedIn.listen(set_signed);\n    \n        set_signed((gapi as any).auth2.getAuthInstance().isSignedIn.get());\n      });\n    });\n  }, []);\n\n  useEffect(() => \n  {\n    if(!signed)\n      return;\n\n    (gapi.client as any).drive.files.list({\n      pageSize: 1,\n      fields: 'files(id)',\n      q: `mimeType = '${ROOT_FOLDER_MIME}' and name = '${ROOT_FOLDER_NAME}' and 'root' in parents and trashed = false`\n    }).then(function(response: {result: {files: {id: string; name: string}[]}}) \n    {\n      if(response.result.files.length)\n        set_root_folder_id(response.result.files[0].id);\n    });    \n  }, [signed]);\n\n  const initialize_root = useCallback(() => \n  {\n    (gapi.client as any).drive.files.create({\n      resource: {\n        name: ROOT_FOLDER_NAME,\n        mimeType: ROOT_FOLDER_MIME\n      },\n      fields: 'id'\n    }).then((response: {result: {id: string}}) => \n    {\n      set_root_folder_id(response.result.id);\n    });\n  }, []);\n\n  const signout = useCallback(() => \n  {\n    (gapi as any).auth2?.getAuthInstance()?.signOut();\n    set_root_folder_id('');\n    console.log('set root to \\'\\'');\n  }, []);\n\n  const add_files = useCallback((new_files: FileType[]) => \n  {\n    set_files(old_files => [...old_files, ...new_files])\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {loaded && <>\n        {signed ? <button \n            onClick={signout}\n          >\n            signout from google\n          </button> : <button \n            onClick={(gapi as any).auth2?.getAuthInstance()?.signIn}\n          >\n            signin to google\n          </button>}\n        </>}\n      {signed && !root_folder_id && <button onClick={initialize_root}>Create '{ROOT_FOLDER_NAME}' folder in your root Google Drive and initialize the app</button>}\n      {root_folder_id && <FilePicker root_folder_id={root_folder_id} add_files={add_files} />}\n      {root_folder_id && <FileList files={files} set_files={set_files} root_folder_id={root_folder_id} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}